//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSP_ASPLayer.WcfService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Festival", Namespace="http://schemas.datacontract.org/2004/07/TSP.EntityLayer", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Festival : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateAndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TSP_ASPLayer.WcfService.Location LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TSP_ASPLayer.WcfService.Performer[] PerformersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TSP_ASPLayer.WcfService.Ticket[] TicketsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateAndTime {
            get {
                return this.DateAndTimeField;
            }
            set {
                if ((this.DateAndTimeField.Equals(value) != true)) {
                    this.DateAndTimeField = value;
                    this.RaisePropertyChanged("DateAndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TSP_ASPLayer.WcfService.Location Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TSP_ASPLayer.WcfService.Performer[] Performers {
            get {
                return this.PerformersField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformersField, value) != true)) {
                    this.PerformersField = value;
                    this.RaisePropertyChanged("Performers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TSP_ASPLayer.WcfService.Ticket[] Tickets {
            get {
                return this.TicketsField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketsField, value) != true)) {
                    this.TicketsField = value;
                    this.RaisePropertyChanged("Tickets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/TSP.EntityLayer", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TSP_ASPLayer.WcfService.Festival FestivalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Capacity {
            get {
                return this.CapacityField;
            }
            set {
                if ((object.ReferenceEquals(this.CapacityField, value) != true)) {
                    this.CapacityField = value;
                    this.RaisePropertyChanged("Capacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TSP_ASPLayer.WcfService.Festival Festival {
            get {
                return this.FestivalField;
            }
            set {
                if ((object.ReferenceEquals(this.FestivalField, value) != true)) {
                    this.FestivalField = value;
                    this.RaisePropertyChanged("Festival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Performer", Namespace="http://schemas.datacontract.org/2004/07/TSP.EntityLayer", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Performer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TSP_ASPLayer.WcfService.Festival FestivalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FestivalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestedPayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TSP_ASPLayer.WcfService.Ticket[] TicketsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TSP_ASPLayer.WcfService.Festival Festival {
            get {
                return this.FestivalField;
            }
            set {
                if ((object.ReferenceEquals(this.FestivalField, value) != true)) {
                    this.FestivalField = value;
                    this.RaisePropertyChanged("Festival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FestivalId {
            get {
                return this.FestivalIdField;
            }
            set {
                if ((this.FestivalIdField.Equals(value) != true)) {
                    this.FestivalIdField = value;
                    this.RaisePropertyChanged("FestivalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestedPay {
            get {
                return this.RequestedPayField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestedPayField, value) != true)) {
                    this.RequestedPayField = value;
                    this.RaisePropertyChanged("RequestedPay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TSP_ASPLayer.WcfService.Ticket[] Tickets {
            get {
                return this.TicketsField;
            }
            set {
                if ((object.ReferenceEquals(this.TicketsField, value) != true)) {
                    this.TicketsField = value;
                    this.RaisePropertyChanged("Tickets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ticket", Namespace="http://schemas.datacontract.org/2004/07/TSP.EntityLayer", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Ticket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TSP_ASPLayer.WcfService.Festival FestivalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FestivalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TSP_ASPLayer.WcfService.Performer[] PerformersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TSP_ASPLayer.WcfService.Festival Festival {
            get {
                return this.FestivalField;
            }
            set {
                if ((object.ReferenceEquals(this.FestivalField, value) != true)) {
                    this.FestivalField = value;
                    this.RaisePropertyChanged("Festival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FestivalId {
            get {
                return this.FestivalIdField;
            }
            set {
                if ((this.FestivalIdField.Equals(value) != true)) {
                    this.FestivalIdField = value;
                    this.RaisePropertyChanged("FestivalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TSP_ASPLayer.WcfService.Performer[] Performers {
            get {
                return this.PerformersField;
            }
            set {
                if ((object.ReferenceEquals(this.PerformersField, value) != true)) {
                    this.PerformersField = value;
                    this.RaisePropertyChanged("Performers");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfService.IFestival")]
    public interface IFestival {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/GetFestivalByName", ReplyAction="http://tempuri.org/IFestival/GetFestivalByNameResponse")]
        TSP_ASPLayer.WcfService.Festival GetFestivalByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/GetFestivalByName", ReplyAction="http://tempuri.org/IFestival/GetFestivalByNameResponse")]
        System.Threading.Tasks.Task<TSP_ASPLayer.WcfService.Festival> GetFestivalByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/GetAllFestivals", ReplyAction="http://tempuri.org/IFestival/GetAllFestivalsResponse")]
        TSP_ASPLayer.WcfService.Festival[] GetAllFestivals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/GetAllFestivals", ReplyAction="http://tempuri.org/IFestival/GetAllFestivalsResponse")]
        System.Threading.Tasks.Task<TSP_ASPLayer.WcfService.Festival[]> GetAllFestivalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/CreateNewFestival", ReplyAction="http://tempuri.org/IFestival/CreateNewFestivalResponse")]
        void CreateNewFestival(TSP_ASPLayer.WcfService.Festival festival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/CreateNewFestival", ReplyAction="http://tempuri.org/IFestival/CreateNewFestivalResponse")]
        System.Threading.Tasks.Task CreateNewFestivalAsync(TSP_ASPLayer.WcfService.Festival festival);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/AddLocationToFestival", ReplyAction="http://tempuri.org/IFestival/AddLocationToFestivalResponse")]
        void AddLocationToFestival(string festivalName, TSP_ASPLayer.WcfService.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/AddLocationToFestival", ReplyAction="http://tempuri.org/IFestival/AddLocationToFestivalResponse")]
        System.Threading.Tasks.Task AddLocationToFestivalAsync(string festivalName, TSP_ASPLayer.WcfService.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/AddPerformerToFestival", ReplyAction="http://tempuri.org/IFestival/AddPerformerToFestivalResponse")]
        void AddPerformerToFestival(string festivalName, TSP_ASPLayer.WcfService.Performer performer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/AddPerformerToFestival", ReplyAction="http://tempuri.org/IFestival/AddPerformerToFestivalResponse")]
        System.Threading.Tasks.Task AddPerformerToFestivalAsync(string festivalName, TSP_ASPLayer.WcfService.Performer performer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/AddTicketToFestival", ReplyAction="http://tempuri.org/IFestival/AddTicketToFestivalResponse")]
        void AddTicketToFestival(string festivalName, TSP_ASPLayer.WcfService.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/AddTicketToFestival", ReplyAction="http://tempuri.org/IFestival/AddTicketToFestivalResponse")]
        System.Threading.Tasks.Task AddTicketToFestivalAsync(string festivalName, TSP_ASPLayer.WcfService.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/DeleteFestival", ReplyAction="http://tempuri.org/IFestival/DeleteFestivalResponse")]
        void DeleteFestival(string festivalName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/DeleteFestival", ReplyAction="http://tempuri.org/IFestival/DeleteFestivalResponse")]
        System.Threading.Tasks.Task DeleteFestivalAsync(string festivalName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/DeleteLocationFromFestival", ReplyAction="http://tempuri.org/IFestival/DeleteLocationFromFestivalResponse")]
        void DeleteLocationFromFestival(string festivalName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/DeleteLocationFromFestival", ReplyAction="http://tempuri.org/IFestival/DeleteLocationFromFestivalResponse")]
        System.Threading.Tasks.Task DeleteLocationFromFestivalAsync(string festivalName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/DeletePerformerFromFestival", ReplyAction="http://tempuri.org/IFestival/DeletePerformerFromFestivalResponse")]
        void DeletePerformerFromFestival(string festivalName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFestival/DeletePerformerFromFestival", ReplyAction="http://tempuri.org/IFestival/DeletePerformerFromFestivalResponse")]
        System.Threading.Tasks.Task DeletePerformerFromFestivalAsync(string festivalName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFestivalChannel : TSP_ASPLayer.WcfService.IFestival, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FestivalClient : System.ServiceModel.ClientBase<TSP_ASPLayer.WcfService.IFestival>, TSP_ASPLayer.WcfService.IFestival {
        
        public FestivalClient() {
        }
        
        public FestivalClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FestivalClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FestivalClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FestivalClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TSP_ASPLayer.WcfService.Festival GetFestivalByName(string name) {
            return base.Channel.GetFestivalByName(name);
        }
        
        public System.Threading.Tasks.Task<TSP_ASPLayer.WcfService.Festival> GetFestivalByNameAsync(string name) {
            return base.Channel.GetFestivalByNameAsync(name);
        }
        
        public TSP_ASPLayer.WcfService.Festival[] GetAllFestivals() {
            return base.Channel.GetAllFestivals();
        }
        
        public System.Threading.Tasks.Task<TSP_ASPLayer.WcfService.Festival[]> GetAllFestivalsAsync() {
            return base.Channel.GetAllFestivalsAsync();
        }
        
        public void CreateNewFestival(TSP_ASPLayer.WcfService.Festival festival) {
            base.Channel.CreateNewFestival(festival);
        }
        
        public System.Threading.Tasks.Task CreateNewFestivalAsync(TSP_ASPLayer.WcfService.Festival festival) {
            return base.Channel.CreateNewFestivalAsync(festival);
        }
        
        public void AddLocationToFestival(string festivalName, TSP_ASPLayer.WcfService.Location location) {
            base.Channel.AddLocationToFestival(festivalName, location);
        }
        
        public System.Threading.Tasks.Task AddLocationToFestivalAsync(string festivalName, TSP_ASPLayer.WcfService.Location location) {
            return base.Channel.AddLocationToFestivalAsync(festivalName, location);
        }
        
        public void AddPerformerToFestival(string festivalName, TSP_ASPLayer.WcfService.Performer performer) {
            base.Channel.AddPerformerToFestival(festivalName, performer);
        }
        
        public System.Threading.Tasks.Task AddPerformerToFestivalAsync(string festivalName, TSP_ASPLayer.WcfService.Performer performer) {
            return base.Channel.AddPerformerToFestivalAsync(festivalName, performer);
        }
        
        public void AddTicketToFestival(string festivalName, TSP_ASPLayer.WcfService.Ticket ticket) {
            base.Channel.AddTicketToFestival(festivalName, ticket);
        }
        
        public System.Threading.Tasks.Task AddTicketToFestivalAsync(string festivalName, TSP_ASPLayer.WcfService.Ticket ticket) {
            return base.Channel.AddTicketToFestivalAsync(festivalName, ticket);
        }
        
        public void DeleteFestival(string festivalName) {
            base.Channel.DeleteFestival(festivalName);
        }
        
        public System.Threading.Tasks.Task DeleteFestivalAsync(string festivalName) {
            return base.Channel.DeleteFestivalAsync(festivalName);
        }
        
        public void DeleteLocationFromFestival(string festivalName) {
            base.Channel.DeleteLocationFromFestival(festivalName);
        }
        
        public System.Threading.Tasks.Task DeleteLocationFromFestivalAsync(string festivalName) {
            return base.Channel.DeleteLocationFromFestivalAsync(festivalName);
        }
        
        public void DeletePerformerFromFestival(string festivalName) {
            base.Channel.DeletePerformerFromFestival(festivalName);
        }
        
        public System.Threading.Tasks.Task DeletePerformerFromFestivalAsync(string festivalName) {
            return base.Channel.DeletePerformerFromFestivalAsync(festivalName);
        }
    }
}
